{"version":3,"sources":["business/Weather/selectors.ts","business/SearchCity/selectors.ts","components/LatestCities/index.tsx","components/SearchCityForm/index.tsx","business/Weather/actions.ts","business/Weather/types.ts","business/SearchCity/reducer.ts","business/Weather/reducer.ts","store/rootReducer.ts","business/SearchCity/types.ts","api/OpenWeatherMapAPI.ts","models/weather.ts","service/WeatherService.ts","business/Weather/sagas.ts","business/SearchCity/actions.ts","store/rootSaga.ts","store/configureStore.js","helpers/localStorage.tsx","store/index.js","components/WeatherResult/index.tsx","components/App/index.tsx","index.tsx"],"names":["getWeather","state","weather","getWeatherLoading","loading","getWeatherError","error","latestCities","searchCity","cityList","LatestCities","className","disabled","onCitySelected","useSelector","latestCitiesAction","cn","map","cityName","index","key","type","onClick","SearchCityForm","dispatch","useDispatch","isLoading","initialValues","city","validate","values","errors","onSubmit","payload","validateOnMount","handleChange","handleBlur","handleSubmit","isValid","setFieldValue","htmlFor","name","id","onChange","onBlur","value","setTimeout","initialState","rootReducer","combineReducers","action","cityItem","find","c","filter","ci","OpenWeatherMapAPI","axios","create","baseURL","Coordinates","lat","lon","this","WeatherMain","temp","pressure","humidity","temp_max","temp_min","Weather","coord","main","sys","coordinates","country","a","parameters","get","params","q","appid","process","units","response","data","console","log","fetchWeather","watchFetchWeather","sagas","call","result","put","takeLatest","all","rootSaga","weatherSagas","spawn","sagaMiddleware","createSagaMiddleware","store","preloadedState","composeEnhancers","composeWithDevTools","createStore","applyMiddleware","run","configureStore","serializedState","localStorage","getItem","JSON","parse","err","loadState","subscribe","stringify","setItem","saveState","getState","WeatherResult","useState","mapLoading","setMapLoading","useEffect","renderMap","bottomLeft","topRight","url","title","width","height","scrolling","src","onLoad","axiosError","message","renderErrorMessage","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f261324f.chunk.js","sourcesContent":["import { RootState } from 'store/rootReducer';\n\nexport const getWeather = (state: RootState) => state.weather.weather;\nexport const getWeatherLoading = (state: RootState) => state.weather.loading;\nexport const getWeatherError = (state: RootState) => state.weather.error;\n","import { RootState } from 'store/rootReducer';\n\nexport const latestCities = (state: RootState) => state.searchCity.cityList;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { latestCities as latestCitiesAction } from 'business/SearchCity/selectors';\nimport cn from 'classnames';\n\nimport './styles.scss';\n\ninterface LatestCitiesProps {\n  className?: string;\n  onCitySelected: (city: string) => void;\n  disabled: boolean;\n}\n\nconst LatestCities: React.FC<LatestCitiesProps> = ({\n  className,\n  disabled,\n  onCitySelected,\n}) => {\n  const latestCities = useSelector(latestCitiesAction) as string[];\n  return (\n    <div className={cn('latest-cities', className)}>\n      Latest Cities:{' '}\n      {latestCities.map((cityName, index) => (\n        <span key={cityName}>\n          <button\n            className=\"latest-cities__city\"\n            disabled={disabled}\n            type=\"button\"\n            onClick={() => onCitySelected(cityName)}\n          >\n            {cityName}\n          </button>\n          {index < 4 && ','}{' '}\n        </span>\n      ))}\n    </div>\n  );\n};\n\nexport default LatestCities;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Formik, FormikProps } from 'formik';\nimport { requestWeather } from 'business/Weather/actions';\nimport { getWeatherLoading } from 'business/Weather/selectors';\n\nimport './styles.scss';\nimport LatestCities from 'components/LatestCities';\n\ninterface FormValues {\n  city: string;\n}\n\ninterface FormError {\n  city?: string;\n}\n\nconst SearchCityForm: React.FC = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getWeatherLoading);\n\n  return (\n    <div className=\"search-city-form\">\n      <Formik\n        initialValues={{\n          city: '',\n        }}\n        validate={(values: FormValues) => {\n          const errors: FormError = {};\n          if (!values.city) {\n            errors.city = 'Required';\n          }\n          return errors;\n        }}\n        onSubmit={(values: FormValues) => {\n          dispatch(requestWeather(values.city));\n        }}\n        validateOnMount\n      >\n        {({\n          values,\n          handleChange,\n          handleBlur,\n          handleSubmit,\n          errors,\n          isValid,\n          setFieldValue,\n        }: FormikProps<FormValues>) => (\n          <>\n            <form className=\"search-city-form__form\" onSubmit={handleSubmit}>\n              <h1 className=\"search-city-form__header\">City Forecast</h1>\n              <div className=\"search-city-form__group\">\n                <label className=\"search-city-form__label\" htmlFor=\"cityName\">\n                  City:{' '}\n                  <input\n                    name=\"city\"\n                    className=\"search-city-form__input-text\"\n                    type=\"text\"\n                    id=\"cityName\"\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    value={values.city}\n                  />\n                </label>\n                <button\n                  type=\"submit\"\n                  disabled={!isValid || isLoading}\n                  className=\"search-city-form__button\"\n                >\n                  Search\n                </button>\n              </div>\n              <LatestCities\n                className=\"search-city-form__latest-cities\"\n                disabled={isLoading}\n                onCitySelected={(city) => {\n                  setFieldValue('city', city);\n                  setTimeout(() => handleSubmit());\n                }}\n              />\n            </form>\n          </>\n        )}\n      </Formik>\n    </div>\n  );\n};\n\nexport default SearchCityForm;\n","import {\n  WEATHER_FETCH_REQUESTED,\n  WEATHER_FETCH_SUCCEEDED,\n  WEATHER_FETCH_FAILED,\n  WeatherActions,\n} from './types';\nimport Weather from 'models/weather';\n\nexport function requestWeather(cityName: string): WeatherActions {\n  return {\n    type: WEATHER_FETCH_REQUESTED,\n    payload: cityName,\n  };\n}\n\nexport function requestWeatherSuccess(response: Weather): WeatherActions {\n  return {\n    type: WEATHER_FETCH_SUCCEEDED,\n    payload: response,\n  };\n}\n\nexport function requestWeatherError(error: Error): WeatherActions {\n  return {\n    type: WEATHER_FETCH_FAILED,\n    payload: error,\n  };\n}\n","import Weather from 'models/weather';\n\nexport const WEATHER_FETCH_REQUESTED = 'WEATHER_FETCH_REQUESTED';\nexport const WEATHER_FETCH_SUCCEEDED = 'WEATHER_FETCH_SUCCEEDED';\nexport const WEATHER_FETCH_FAILED = 'WEATHER_FETCH_FAILED';\n\nexport interface WeatherFetchRequestedAction {\n  type: typeof WEATHER_FETCH_REQUESTED;\n  payload: string;\n}\n\ninterface WeatherFetchSucceededAction {\n  type: typeof WEATHER_FETCH_SUCCEEDED;\n  payload: Weather;\n}\n\ninterface WeatherFetchFailedAction {\n  type: typeof WEATHER_FETCH_FAILED;\n  payload: Error;\n}\n\nexport type WeatherActions =\n  | WeatherFetchRequestedAction\n  | WeatherFetchSucceededAction\n  | WeatherFetchFailedAction;\n\nexport interface WeatherState {\n  weather: Weather | null;\n  loading: boolean;\n  error: Error | null;\n}\n","import {\n  SearchCityState,\n  SearchCityActions,\n  ADD_CITY_TO_CITY_LIST,\n} from './types';\n\nconst initialState: SearchCityState = {\n  cityList: [],\n};\n\nexport function SearchCity(\n  state = initialState,\n  action: SearchCityActions\n): SearchCityState {\n  switch (action.type) {\n    case ADD_CITY_TO_CITY_LIST:\n      const cityItem = state.cityList?.find((c) => c === action.payload);\n      if (cityItem) {\n        return {\n          cityList: [\n            action.payload,\n            ...(state.cityList?.filter(\n              (ci) => ci !== action.payload\n            ) as string[]),\n          ],\n        };\n      }\n      return {\n        cityList: [\n          action.payload,\n          ...(state.cityList?.filter((ci, index) => index < 4) as string[]),\n        ],\n      };\n\n    default:\n      return state;\n  }\n}\n","import {\n  WEATHER_FETCH_REQUESTED,\n  WEATHER_FETCH_SUCCEEDED,\n  WEATHER_FETCH_FAILED,\n  WeatherState,\n  WeatherActions,\n} from './types';\n\nconst initialState: WeatherState = {\n  loading: false,\n  error: null,\n  weather: null,\n};\n\nexport function Weather(\n  state = initialState,\n  action: WeatherActions\n): WeatherState {\n  switch (action.type) {\n    case WEATHER_FETCH_REQUESTED:\n      return {\n        ...state,\n        loading: true,\n        error: null,\n        weather: null,\n      };\n\n    case WEATHER_FETCH_SUCCEEDED:\n      return {\n        ...state,\n        loading: false,\n        error: null,\n        weather: action.payload,\n      };\n\n    case WEATHER_FETCH_FAILED:\n      return {\n        ...state,\n        loading: false,\n        weather: null,\n        error: action.payload,\n      };\n\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport { SearchCity } from 'business/SearchCity/reducer';\nimport { Weather } from 'business/Weather/reducer';\n\nconst rootReducer = combineReducers({\n  searchCity: SearchCity,\n  weather: Weather,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\nexport default rootReducer;\n","export const ADD_CITY_TO_CITY_LIST = 'ADD_CITY_TO_CITY_LIST';\n\ninterface AddCityToCityListAction {\n  type: typeof ADD_CITY_TO_CITY_LIST;\n  payload: string;\n}\n\nexport type SearchCityActions = AddCityToCityListAction;\n\nexport interface SearchCityState {\n  cityList: string[] | null;\n}\n","import axios from 'axios';\n\nexport const appid = '80fe903c6f5e04a104c9ca1a60b94e96';\n\nconst OpenWeatherMapAPI = axios.create({\n  baseURL: 'https://api.openweathermap.org/data/2.5/',\n});\n\nexport default OpenWeatherMapAPI;\n","export interface CoordinatesData {\n  lat: number;\n  lon: number;\n}\n\nexport class Coordinates {\n  readonly lat: number;\n  readonly lon: number;\n\n  constructor({ lat, lon }: CoordinatesData) {\n    this.lat = lat;\n    this.lon = lon;\n  }\n}\n\nexport interface WeatherMainData {\n  temp: number;\n  pressure: number;\n  humidity: number;\n  temp_max: number;\n  temp_min: number;\n}\n\nclass WeatherMain {\n  readonly temp: number;\n  readonly pressure: number;\n  readonly humidity: number;\n  readonly temp_max: number;\n  readonly temp_min: number;\n\n  constructor({\n    temp,\n    pressure,\n    humidity,\n    temp_max,\n    temp_min,\n  }: WeatherMainData) {\n    this.temp = temp;\n    this.pressure = pressure;\n    this.humidity = humidity;\n    this.temp_max = temp_max;\n    this.temp_min = temp_min;\n  }\n}\n\nexport interface WeatherSysData {\n  country: string;\n}\n\nexport interface WeatherData {\n  coord: CoordinatesData;\n  main: WeatherMainData;\n  name: string;\n  sys: WeatherSysData;\n}\n\nclass Weather {\n  readonly coordinates: Coordinates;\n  readonly main: WeatherMain;\n  readonly cityName: string;\n  readonly country: string;\n\n  constructor({ coord, main, name, sys }: WeatherData) {\n    this.coordinates = new Coordinates(coord);\n    this.main = new WeatherMain(main);\n    this.cityName = name;\n    this.country = sys.country;\n  }\n}\n\nexport default Weather;\n","/**\n * @file Manages user requests.\n * @module services/UserService\n */\nimport OpenWeatherMapAPI from 'api/OpenWeatherMapAPI';\nimport Weather, { WeatherData } from 'models/weather';\n\n// eslint-disable-next-line import/prefer-default-export\nexport const getWeather = async (\n  parameters = {\n    city: 'mendoza',\n  }\n): Promise<Weather> => {\n  try {\n    const response = await OpenWeatherMapAPI.get<WeatherData>('weather', {\n      params: {\n        q: parameters.city,\n        appid: process.env.REACT_APP_NOT_SECRET_CODE,\n        units: 'metric',\n      },\n    });\n    return new Weather(response.data);\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.log(err);\n    throw err;\n  }\n};\n","import { call, put, takeLatest, all } from 'redux-saga/effects';\nimport { WEATHER_FETCH_REQUESTED, WeatherFetchRequestedAction } from './types';\nimport { requestWeatherSuccess, requestWeatherError } from './actions';\nimport { getWeather } from '../../service/WeatherService';\nimport { addCityToCityList } from 'business/SearchCity/actions';\nimport Weather from 'models/weather';\n\nfunction* fetchWeather(action: WeatherFetchRequestedAction) {\n  try {\n    const result: Weather = yield call(() =>\n      getWeather({ city: action.payload })\n    );\n    yield put(requestWeatherSuccess(result));\n    yield put(addCityToCityList(result.cityName));\n  } catch (e) {\n    yield put(requestWeatherError(e));\n  }\n}\n\nfunction* watchFetchWeather() {\n  yield takeLatest(WEATHER_FETCH_REQUESTED, fetchWeather);\n}\n\nexport default function* sagas() {\n  yield all([watchFetchWeather()]);\n}\n","import { ADD_CITY_TO_CITY_LIST, SearchCityActions } from './types';\n\nexport function addCityToCityList(cityName: string): SearchCityActions {\n  return {\n    type: ADD_CITY_TO_CITY_LIST,\n    payload: cityName,\n  };\n}\n","import { all, spawn } from 'redux-saga/effects';\nimport weatherSagas from 'business/Weather/sagas';\n\nexport default function* rootSaga() {\n  yield all([weatherSagas].map(spawn));\n}\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\n\nimport rootReducer from './rootReducer';\nimport rootSaga from './rootSaga';\n\n// create the saga middleware\nconst sagaMiddleware = createSagaMiddleware();\n\nexport default function configureStore(preloadedState = {}) {\n  const composeEnhancers = composeWithDevTools({\n    // Specify name here, actionsBlacklist, actionsCreators and other options if needed\n  });\n\n  // mount it on the Store\n  const store = createStore(\n    rootReducer,\n    preloadedState,\n    composeEnhancers(applyMiddleware(sagaMiddleware))\n  );\n\n  // then run the saga\n  sagaMiddleware.run(rootSaga);\n  return store;\n}\n","export const loadState = () => {\n  try {\n    const serializedState = localStorage.getItem('state');\n    if (serializedState) {\n      return JSON.parse(serializedState);\n    }\n    return undefined;\n  } catch (err) {\n    return undefined;\n  }\n};\n\nexport const saveState = (state: any) => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem('state', serializedState);\n  } catch (err) {}\n};\n","import configureStore from 'store/configureStore';\nimport { loadState, saveState } from 'helpers/localStorage';\n\nconst persistedState = loadState();\nexport const store = configureStore(persistedState);\n\nstore.subscribe(() => {\n  saveState({ searchCity: store.getState().searchCity });\n});\n","import React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport {\n  getWeather,\n  getWeatherLoading,\n  getWeatherError,\n} from 'business/Weather/selectors';\nimport { AxiosError } from 'axios';\nimport { Coordinates } from 'models/weather';\nimport cn from 'classnames';\n\nimport './styles.scss';\n\nconst WeatherResult: React.FC = () => {\n  const weather = useSelector(getWeather);\n  const isLoading = useSelector(getWeatherLoading);\n  const error = useSelector(getWeatherError);\n  const [mapLoading, setMapLoading] = useState(false);\n\n  useEffect(() => {\n    setMapLoading(true);\n  }, [weather]);\n\n  const renderLoading = () => (\n    <div className=\"weather-result__loading\">Getting the weather...</div>\n  );\n\n  const renderErrorMessage = () => {\n    const axiosError = error as AxiosError;\n    return axiosError?.response?.data?.message || axiosError.message;\n  };\n\n  const renderError = () => (\n    <div className=\"weather-result__error\">\n      Failed to the weather. Maybe this message could help you:{' '}\n      {renderErrorMessage()}\n    </div>\n  );\n\n  const renderWeather = () => (\n    <div className=\"weather-result__weather\">\n      <h3 className=\"weather-result__weather-header\">\n        Weather for {`${weather?.cityName}, ${weather?.country}`}\n      </h3>\n      <p className=\"weather-result__weather-item\">\n        <strong>Temperature:</strong> {weather?.main.temp} °C\n      </p>\n      <p className=\"weather-result__weather-item\">\n        <strong>Pressure:</strong> {weather?.main.pressure} hPa\n      </p>\n      <p className=\"weather-result__weather-item\">\n        <strong>Humidity:</strong> {weather?.main.humidity} %\n      </p>\n      <p className=\"weather-result__weather-item\">\n        <strong>Max temperature:</strong> {weather?.main.temp_max} °C\n      </p>\n      <p className=\"weather-result__weather-item\">\n        <strong>Min temperature:</strong> {weather?.main.temp_min} °C\n      </p>\n      {renderMap()}\n    </div>\n  );\n\n  const renderMap = () => {\n    const coordinates = weather?.coordinates as Coordinates;\n    const diffLat = 0.01246;\n    const diffLong = 0.02038;\n    const bottomLeft = new Coordinates({\n      lat: coordinates.lat - diffLat,\n      lon: coordinates.lon - diffLong,\n    });\n    const topRight = new Coordinates({\n      lat: coordinates.lat + diffLat,\n      lon: coordinates.lon + diffLong,\n    });\n    const url = `https://www.openstreetmap.org/export/embed.html?bbox=${bottomLeft.lon},${bottomLeft.lat},${topRight.lon},${topRight.lat}&layer=mapnik&marker=${coordinates.lat},${coordinates.lon}`;\n\n    return (\n      <div className=\"weather-result__weather-map\">\n        {mapLoading && 'Getting the map...'}\n        <iframe\n          className={cn({ 'weather-result__weather-map--hidden': mapLoading })}\n          title=\"map\"\n          width=\"320\"\n          height=\"350\"\n          scrolling=\"no\"\n          src={url}\n          onLoad={() => setMapLoading(false)}\n        />\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"weather-result\">\n      <div className=\"weather-result__container\">\n        {isLoading && renderLoading()}\n        {weather && renderWeather()}\n        {error && renderError()}\n      </div>\n    </div>\n  );\n};\n\nexport default WeatherResult;\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport SearchCityForm from 'components/SearchCityForm';\nimport { store } from 'store';\nimport WeatherResult from 'components/WeatherResult';\n\nimport './styles.scss';\n\nconst App: React.FC = () => {\n  return (\n    <Provider store={store}>\n      <div className=\"app\">\n        <SearchCityForm />\n        <WeatherResult />\n      </div>\n    </Provider>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'components/App';\n\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}